# General properties of IAIKPkcs11

# uncomment one PKCS11_NATIVE_MODULE entry that fits your configuration, or create a new one
# it is REQUIRED !!! for the application to set this property, because there is no default


#delete this line and choose the correct library
PKCS11_NATIVE_MODULE = <yourcryptoki>

# AEP Networks Keyper Professional
# PKCS11_NATIVE_MODULE = bp201w32HSM.dll

# SafeNet ProtectServer
# PKCS11_NATIVE_MODULE = cryptoki.dll

# Utimaco CryptoServer LAN
# PKCS11_NATIVE_MODULE = cs2_pkcs11.dll

# SafeNet eToken
# PKCS11_NATIVE_MODULE = eTPkcs11.dll


# path to the native library of the IAIK PKCS#11 Wrapper.
# If not specified, tries to load wrapper native library from library path (as VM argument -Djava.library.path) or from class path, i.e. jar file
# PKCS11_WRAPPER_PATH = C:\\Development\\Pkcs11Provider\\lib\\win32\\pkcs11wrapper.dll

# with this property, it is possible to specify an argument that shall be passed to the
# PKCS#11 module when it is initialized.
# this must be a string. please remind  that you have to use a double backslash ("\\") to insert a backslash ('\').
# the provider will append a null termination to it before passing it to the module.
# default: not set
# MODULE_INITIALIZATION_PARAMETERS = configdir='C:/Documents\\ and\\ Settings/myname/Application\\ Data/Mozilla/Profiles/default/cfxcrpru.slt' certPrefix='' keyPrefix='' secmod='secmod.db'\0

# the ID of the slot to use (decimal), (you may use the GetInfo demo of the PKCS#11 wrapper to get the ID of a slot [e.g. card reader])
# if you omit this property, the provider uses the first slot with a token present, if there is no token available, it uses
# the first slot it finds.
# default: not set.
# SLOT_ID = 1
# or with index
# SLOT_ID = [1]


# with this entry, it is possible to hardcode the user PIN for the PKCS#11 token.
# if this entry is set, the provider will pass this PIN to the login manager upon a login attempt.
# it up to the configured login manager, if it really uses this PIN for login; the default login
# manager uses it.
# If this entry is not set, the login manager may try to get the PIN e.g. from the user via a
# user interface dialog.
# default: not set.
# USER_PIN = 1234

# if this is set to true, the keystore will operate using a public session as long as possible. this
# will help preventing a PIN-prompt before the actual crypto operation starts.
# default: false
# LOGIN_KEYSTORE_SESSION_ON_DEMAND = true

# the key store uses this provider to hash certificates and generate key specs
# default: not set (use JCA defaults)
KEY_STORE_SUPPORT_PROVIDER = IAIK

# define, if the provider should check, if a requested algorithm is supported by
# the underlying PKCS#11 token. if enabled, it does not report the JCE algorithm as
# being provided. if disabled, the provider always reports all algorithms which are
# configured in the iaik.pkcs.pkcs11.provider.IAIKPkcs11Algorithm.proprties. however,
# the provider will never report an algorithm as being supported which is not listed
# in this properties file.
# default: false
# CHECK_MECHANISM_SUPPORTED = true

# Set the character encoding that shall be used to read and save charager array attributes (e.g. labels) and PINs.
# Per default, this property is set to true, i.e. UTF8 encoding is used as given in the PKCS#11 specification.
# If set to false, the old character encoding as used in PKCS#11 Provider versions <= 1.3 is used.
# USE_UTF8_ENCODING = true

# the full qualified class name of the delegation provider.
# if software delegation is enabled in general, an engine object of this provider 
# asks this handler for an implementation of an algorithm to which it can delegate the job. 
# an engine class can only use this handler, if it knows to which provider instance it belongs. 
# if it does not know, it uses the global delegate provider.
# default: iaik.pkcs.pkcs11.provider.DefaultDelegateProvider
# DELEGATE_PROVIDER = iaik.pkcs.pkcs11.provider.DefaultDelegateProvider

# the algorithms list of this provider
# this entry must be a relative path from a directory in the CLASSPATH,
# because this properties file is loaded via a ClassLoader
# default: iaik/pkcs/pkcs11/provider/IAIKPkcs11Algorithm.properties
# ALGORITHM_PROPERTIES = iaik/pkcs/pkcs11/provider/IAIKPkcs11Algorithm.properties

# the maximum number of sessions to keep in the session pool of the token manager.
# the token manager creates sessions on demand and not in advance. that means the 
# session pool is empty after start. only open sessions that are currently unused
# are kept in the pool to be able to reuse them on demand.
# must be >= 1. if it is smaller, 1 will be used instead.
# default: 100
SESSION_POOL_MAX_SIZE = 100

# the login manager to use for login of the user, for changing the user PIN
# and for logout.
# this must be the full qualified class name of a class that implements
# iaik.pkcs.pkcs11.provider.LoginManager.
# default: iaik.pkcs.pkcs11.provider.DefaultLoginManager
# the default login manager can be configured using its own properties file
# LOGIN_MANAGER = iaik.pkcs.pkcs11.provider.DefaultLoginManager

# this boolean entry indicates if the provider initializes the underlying
# PKCS#11 module for multi-threaded operation or not.
# if this is set to true, the provider will initialize the module with the
# CKF_OS_LOCKING_OK set to true. 
# if set to false, the provider will initialize the module without any
# argument (NULL_PTR).
# to safely use a PKCS#11 module with multiple threads concurrently, this must
# be set to true.
# default: true
MULTI_THREAD_INIT = true

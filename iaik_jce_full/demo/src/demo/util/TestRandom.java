// Copyright (C) 2002 IAIK
// http://jce.iaik.at
//
// Copyright (C) 2003 - 2013 Stiftung Secure Information and
//                           Communication Technologies SIC
// http://www.sic.st
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.

package demo.util;

import iaik.security.provider.IAIK;
import iaik.security.random.FIPS140Test;

import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.SecureRandom;

import demo.IAIKDemo;

/**
 * Test the random number generators. This runs the AnsiRandom, SHA1Random, and
 * MD5Random random number generators through the FIPS 140-1 defined statistical
 * tests.
 * 
 * @author Andreas Sterbenz
 * @author Christian Hanser
 * @version File Revision <!-- $$Revision: --> 25 <!-- $ -->
 */
public class TestRandom implements IAIKDemo {

	/**
	 * Flag to enable or disable debugging output.
	 */
	static boolean debugOutput = false;

	/**
	 * Performs the PRNG tests and outputs randomly generated bytes. 
	 */
	public void start() {
		boolean result = true;
		try {
			// generating random bytes using the ANSI random
			System.out.println("Generating AnsiRandom...");
			SecureRandom ansiRandom = SecureRandom.getInstance("DESedePRNG", "IAIK");
			int size = 256;
			System.out.println("Generating " + size + " bytes...");
			byte[] rbytes = new byte[size];
			ansiRandom.nextBytes(rbytes);
			System.out.println(hexDump(rbytes));

			// performing the FIPS 140 tests:
			result &= testRandom("DESedePRNG");

			// ... using the ordinary hash based PRNGs
			result &= testRandom("SHA1PRNG");
			result &= testRandom("SHA256PRNG");
			result &= testRandom("SHA384PRNG");
			result &= testRandom("SHA512PRNG");
			result &= testRandom("WhirlpoolPRNG");
			result &= testRandom("RipeMd160PRNG");

			// ... using the hash based FIPS 186-3 PRNGs
			result &= testRandom("SHA1PRNG-FIPS");
			result &= testRandom("SHA256PRNG-FIPS");
			result &= testRandom("SHA384PRNG-FIPS");
			result &= testRandom("SHA512PRNG-FIPS");
			result &= testRandom("RipeMd160PRNG-FIPS");

			// ... using the hash based SP80090 SP800-90 PRNGs
			result &= testRandom("SHA1PRNG-SP80090");
			result &= testRandom("SHA224PRNG-SP80090");
			result &= testRandom("SHA256PRNG-SP80090");
			result &= testRandom("SHA384PRNG-SP80090");
			result &= testRandom("SHA512PRNG-SP80090");

			// ... using the HMAC based SP80090 SP800-90 PRNGs
			result &= testRandom("HMacSHA1PRNG-SP80090");
			result &= testRandom("HMacSHA224PRNG-SP80090");
			result &= testRandom("HMacSHA256PRNG-SP80090");
			result &= testRandom("HMacSHA384PRNG-SP80090");
			result &= testRandom("HMacSHA512PRNG-SP80090");

			// ... using the AES based SP80090 SP800-90 PRNGs
			result &= testRandom("AES128PRNG-SP80090");
			result &= testRandom("AES192PRNG-SP80090");
			result &= testRandom("AES256PRNG-SP80090");

			System.out.println("\nOverall result: " + result);
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException();
		}
	}

	/**
	 * Runs the FIPS 140 test on the specified PRNG algorithm.
	 * 
	 * @param algorithm
	 *          the PRNG algorithm name
	 * @return true on success
	 * @throws NoSuchProviderException
	 * @throws NoSuchAlgorithmException
	 */
	private boolean testRandom(String algorithm)
	    throws NoSuchAlgorithmException, NoSuchProviderException
	{
		// get the PRNG instance
		SecureRandom random = SecureRandom.getInstance(algorithm, "IAIK");
		// get a FIPS test instance
		FIPS140Test tester = new FIPS140Test(random);

		if (debugOutput) {
			tester.setDebugStream(System.out);
		}

		// run the test
		boolean result = tester.startTests();
		System.out.println("Overall test result for " + algorithm + ": " + result);

		return result;
	}

	/**
	 * Helper method that waits for user input.
	 */
	static void waitKey() {
		System.out.println("Hit the <RETURN> key to continue.");
		try {
			do {
				System.in.read();
			} while (System.in.available() > 0);
		} catch (java.io.IOException e) {
			// ignore
		}
	}

	/**
	 * Helper method that performs a hex dump.
	 * 
	 * @param data
	 *          the data to be dumped
	 * @return the dumped data as string
	 */
	static String hexDump(byte[] data) {
		final char[] hexchars = ("0123456789ABCDEF".toCharArray());

		int n = data.length;
		java.io.ByteArrayOutputStream outstream = new java.io.ByteArrayOutputStream(n << 2); // preallocate a chunk
		java.io.PrintWriter out = new java.io.PrintWriter(outstream);
		for (int i = 0; i < n; i += 16) {
			// make sure we got some leading zeros...
			String ofs = Integer.toHexString(i | 0x80000000);
			out.print(ofs.substring(4) + ": ");
			int k = n - i;
			if (k > 16) k = 16;
			for (int j = 0; j < k; j++) {
				out.print(hexchars[(data[i + j] & 0xff) >> 4]);
				out.print(hexchars[data[i + j] & 0x0f] + (j == 7 ? "  " : " "));
			}
			out.println();
		}
		out.flush();
		return outstream.toString();
	}

	public static void main(String args[])
	    throws Exception
	{
		IAIK.addAsProvider(true);

		debugOutput = true;
		TestRandom testRandom = new TestRandom();
		testRandom.start();

		System.out.println("Finished.");
		waitKey();
	}
}
